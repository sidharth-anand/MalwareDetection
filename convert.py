import os
import random

from multiprocessing import Pool, cpu_count

import cv2
import argparse
import numpy as np

import core.run

from core.config import DatasetConfig
from core.dataset import Dataset
from core.resizer import Resizer
from core.sampler import Sampler
from core.utils import DatasetUtils

def parse_args():
    converter_choices = core.run.get_import_choices('converters')
    resizer_choices = core.run.get_import_choices('resizers')
    sampler_choices = core.run.get_import_choices('samplers')

    parser = argparse.ArgumentParser('Malware Detection - Converter')

    parser.add_argument('--dataset-path', type=str, required=True, help='Path to the dataset')
    parser.add_argument('--output-path', type=str, required=True, help='Path to save the converted dataset')
    parser.add_argument('--cpus', type=int, required=False, default=cpu_count(), help='Number of CPUs to use')

    parser.add_argument('--converter', type=str, required=True, choices=converter_choices, help='Converter used on the dataset')
    parser.add_argument('--resizer', type=str, required=False, default='simple', choices=resizer_choices, help='Resizer used on the dataset')
    parser.add_argument('--sampler', type=str, required=False, default='raw', choices=sampler_choices, help='Upsampler/Downsampler for the channels used on the dataset')
    parser.add_argument('--resolution', type=int, required=False, default=256, help='Image resolution')

    args = parser.parse_args()  

    return args

def run_conversion_process(process_data):
    resizer = process_data['resizer'](target_size=(process_data['resolution'], process_data['resolution'])) 
    sampler = process_data['sampler']()

    config = DatasetConfig()
    utils = DatasetUtils(resizer, sampler)

    converter = process_data['converter'](process_data['data_path'], config, utils)

    for datapoint in process_data['data']:
        converted_image = converter._convert_to_image(datapoint[0])
        cv2.imwrite(os.path.join(process_data['output_path'], os.path.basename(datapoint[0]).split('.')[0] + '.png'), converted_image)

def main():
    random.seed(1234)

    args = parse_args()

    ConverterClass = core.run.get_imported_class(f'converters.{args.converter}', Dataset)
    ResizerClass = core.run.get_imported_class(f'resizers.{args.resizer}', Resizer)
    SamplerClass = core.run.get_imported_class(f'samplers.{args.sampler}', Sampler)

    resizer = ResizerClass(target_size=(args.resolution, args.resolution))
    sampler = SamplerClass()

    config = DatasetConfig()
    utils = DatasetUtils(resizer, sampler)

    dataset = ConverterClass(args.dataset_path, config, utils)

    data = dataset._get_dataset()

    if args.cpus > cpu_count():
        args.cpus = cpu_count()

    args.cpus = min(len(data), args.cpus)    
    points_per_process = len(data) // args.cpus
    processes = []

    for i in range(args.cpus - 1):
        processes.append(data[i * points_per_process:(i + 1) * points_per_process])
    processes.append(data[(args.cpus - 1) * points_per_process:])

    process_data = []
    for process in processes:
        process_data.append({
            'converter': ConverterClass,
            'resizer': ResizerClass,
            'sampler': SamplerClass,
            'data': process,
            'resolution': args.resolution,
            'data_path': args.dataset_path,
            'output_path': args.output_path,
        })

    pool = Pool(args.cpus)

    try:
        pool.map(run_conversion_process, process_data)

        pool.close()
        pool.join()

    except KeyboardInterrupt:
        pool.close()
        pool.join()

if __name__ == '__main__':
    main()