import math
import typing

import numpy as np

from core.config import DatasetConfig
from core.utils import DatasetUtils

from datasets.motif import MOTIF

class BiGram(MOTIF):
    OUTPUT_CHANNELS = 1
    CONVERT_OFFLINE = True

    def __init__(self, path: str, config: DatasetConfig, utils: DatasetUtils) -> None:
        super().__init__(path, config, utils)

    def _get_byte_data(self, file: str) -> typing.List[int]:
        f = open(file, 'rb')

        file_data = []

        for line in f.readlines():
            for byte in line:
                file_data.append(byte)

        return file_data

    def _convert_to_image(self, file: str) -> np.array:
        file_data = self._get_byte_data(file)
        file_data = list(np.array(file_data).flat)

        width = 47 * 15
        height = math.ceil(len(file_data) / width / 3)

        image = np.array(file_data + [0] * (height * width * 3 - len(file_data)), dtype=np.uint8).reshape((height, width, 3))
        return image
