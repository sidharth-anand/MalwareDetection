import abc
import os
import glob
import typing

from core.dataset import Dataset
from core.config import DatasetConfig
from core.utils import DatasetUtils

class Dumpware(Dataset, metaclass=abc.ABCMeta):
    def __init__(self, path: str, config: DatasetConfig, utils: DatasetUtils) -> None:
        super().__init__(path, config, utils)

        self.classes = {}
        self.class_indices = {}

    def _get_dataset(self) -> Dataset.DatasetType:
        class_paths = []

        class_paths.extend(list(glob.glob(os.path.join(self.path, '224', '224', 'TEST', '*'))))
        class_paths.extend(list(glob.glob(os.path.join(self.path, '224', '224', 'TRAINING', '*'))))

        dataset = []

        for class_path in class_paths:
            self.class_indices[os.path.basename(class_path)] = len(self.classes)
            self.classes[len(self.classes)] = os.path.basename(class_path)

            for file in glob.glob(os.path.join(class_path, '*.png')):
                dataset.append((file, self.class_indices[os.path.basename(class_path)]))
        
        return dataset

    def _get_classes(self) -> typing.Dict[int, str]:
        return self.classes