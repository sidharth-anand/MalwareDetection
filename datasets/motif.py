import os
import abc
import json
import typing

from core.dataset import Dataset
from core.config import DatasetConfig
from core.utils import DatasetUtils

class MOTIF(Dataset, metaclass=abc.ABCMeta):
    def __init__(self, path: str, config: DatasetConfig, utils: DatasetUtils) -> None:
        self.classes = {}
        self.class_indices = {}
        self.class_count = {}

        super().__init__(path, config, utils)

    def _get_dataset(self) -> Dataset.DatasetType:
        data_path = os.path.join(self.path, 'motif_dataset.jsonl')

        dataset = []

        with open(data_path, 'r') as f:
            for line in f.readlines():
                data = json.loads(line)

                if not data['label'] in self.class_indices:
                    self.class_indices[data['label']] = len(self.classes)
                    self.class_count[len(self.classes)] = 0
                    self.classes[len(self.classes)] = data['reported_family']

                self.class_count[self.class_indices[data['label']]] += 1

                dataset.append((os.path.join(self.path, f'MOTIF_{data["md5"]}'), self.class_indices[data['label']]))

        print(self.classes)

        dataset = [(x, y) for x, y in dataset if self.class_count[y] >= 5]
        self.classes = {k: v for k, v in self.classes.items() if self.class_count[k] >= 5}

        return dataset

    def _get_classes(self) -> typing.Dict[int, str]:
        return self.classes
