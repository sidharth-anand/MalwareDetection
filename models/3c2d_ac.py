import tensorflow as tf

from core.model import Model

class M3C2D_AC(Model):
    INPUT_SIZE = (256, 256)
    INPUT_CHANNELS = 1

    def __init__(self, num_classes: int) -> None:
        super().__init__()

        self.conv_1_1 = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same', input_shape=(M3C2D_AC.INPUT_SIZE[0], M3C2D_AC.INPUT_SIZE[1], M3C2D_AC.INPUT_CHANNELS))
        self.conv_1_2 = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.conv_2_1 = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_2_2 = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.conv_3_1 = tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_3_2 = tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.flatten = tf.keras.layers.Flatten()

        self.dense_1 = tf.keras.layers.Dense(units=512, activation=tf.keras.activations.relu)
        self.dropout_1 = tf.keras.layers.Dropout(rate=0.5)

        self.dense_2 = tf.keras.layers.Dense(units=256, activation=tf.keras.activations.relu)
        self.dropout_2 = tf.keras.layers.Dropout(rate=0.5)

        self.dense_output = tf.keras.layers.Dense(num_classes, kernel_initializer=tf.keras.initializers.GlorotUniform(), activation=tf.keras.activations.sigmoid)

    def call(self, inputs: tf.Tensor) -> tf.Tensor:
        x = self.conv_1_1(inputs)
        x = self.conv_1_2(x)

        x = self.conv_2_1(x)
        x = self.conv_2_2(x)

        x = self.conv_3_1(x)
        x = self.conv_3_2(x)

        x = self.flatten(x)

        x = self.dense_1(x)
        x = self.dropout_1(x)

        x = self.dense_2(x)
        x = self.dropout_2(x)

        x = self.dense_output(x)

        return x
