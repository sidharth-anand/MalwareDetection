import tensorflow as tf

from core.model import Model

class M6C1D_AC(Model):
    INPUT_SIZE = (256, 256)
    INPUT_CHANNELS = 1

    def __init__(self, num_classes: int) -> None:
        super().__init__()

        self.conv_1_1 = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same', input_shape=(M6C1D_AC.INPUT_SIZE[0], M6C1D_AC.INPUT_SIZE[1], M6C1D_AC.INPUT_CHANNELS))
        self.conv_1_2 = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.conv_2_1 = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_2_2 = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.conv_3_1 = tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_3_2 = tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.conv_4_1 = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_4_2 = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.conv_5_1 = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_5_2 = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.conv_6_1 = tf.keras.layers.Conv2D(filters=num_classes, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_6_2 = tf.keras.layers.Conv2D(filters=num_classes, kernel_size=(3, 3), strides=(2, 2), activation=tf.keras.activations.relu, padding='same')

        self.output_layer = tf.keras.layers.GlobalAveragePooling2D()

    def call(self, inputs: tf.Tensor) -> tf.Tensor:
        x = self.conv_1_1(inputs)
        x = self.conv_1_2(x)

        x = self.conv_2_1(x)
        x = self.conv_2_2(x)

        x = self.conv_3_1(x)
        x = self.conv_3_2(x)

        x = self.conv_4_1(x)
        x = self.conv_4_2(x)

        x = self.conv_5_1(x)
        x = self.conv_5_2(x)

        x = self.conv_6_1(x)
        x = self.conv_6_2(x)

        x = self.output_layer(x)

        return x