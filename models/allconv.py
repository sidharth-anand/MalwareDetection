from warnings import filters
import tensorflow as tf

from core.model import Model

class AllConvLayer(tf.keras.layers.Layer):
    def __init__(self, filters: int, output_filters: int = None) -> None:
        super().__init__()

        self.conv_1 = tf.keras.layers.Conv2D(filters=filters, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_2 = tf.keras.layers.Conv2D(filters=filters, kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same')
        self.conv_3 = tf.keras.layers.Conv2D(filters=(filters if output_filters is None else output_filters), kernel_size=(3, 3), activation=tf.keras.activations.relu, padding='same', strides=(2, 2))

    def call(self, inputs: tf.Tensor) -> tf.Tensor:
        x = self.conv_1(inputs)
        x = self.conv_2(x)
        x = self.conv_3(x)

        return x

class AllConv(Model):
    INPUT_SIZE = (256, 256)
    INPUT_CHANNELS = 1

    def __init__(self, num_classes: int) -> None:
        super().__init__()

        self.conv_1 = AllConvLayer(96)
        self.conv_2 = AllConvLayer(192)
        self.conv_3 = AllConvLayer(192)
        self.conv_4 = AllConvLayer(96)
        self.conv_5 = AllConvLayer(48, num_classes)

        self.output_layer = tf.keras.layers.GlobalAveragePooling2D()

    def call(self, inputs: tf.Tensor) -> tf.Tensor:
        x = self.conv_1(inputs)
        x = self.conv_2(x)
        x = self.conv_3(x)
        x = self.conv_4(x)
        x = self.conv_5(x)

        x = self.output_layer(x)

        return x