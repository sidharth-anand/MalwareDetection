import tensorflow as tf

from core.model import Model

class CustomMNV2(Model):
    INPUT_SIZE = (256, 256)
    INPUT_CHANNELS = 3

    def __init__(self, num_classes):
        super().__init__()
        
        IMG_SHAPE = CustomMNV2.INPUT_SIZE + (CustomMNV2.INPUT_CHANNELS,)

        base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,include_top=False,weights='imagenet')
        base_model.trainable = True
        self.encoder = tf.keras.Model(base_model.input, base_model.get_layer('block_7_add').output,name='encoder')

        self.model = tf.keras.Sequential(name='clf')
        
        self.model.add(tf.keras.layers.Conv2D(16, 3, strides=1, padding="valid",name='clf_conv'))
        self.model.add(tf.keras.layers.BatchNormalization(name='clf_BN'))
        self.model.add(tf.keras.layers.Activation("relu",name='clf_relu0'))
        self.model.add(tf.keras.layers.Dropout(0.25,name='clf_drp'))
        self.model.add(tf.keras.layers.Flatten(name='clf_faltten'))
        self.model.add(tf.keras.layers.Dense(self._find_outf(num_classes),name='clf_linear0'))
        self.model.add(tf.keras.layers.Activation("relu",name='clf_relu1'))
        self.model.add(tf.keras.layers.Dense(num_classes, name='clf_linear1'))
        self.model.add(tf.keras.layers.Activation("softmax", name='clf_out'))

    def _find_outf(self, out_class):
        arr=[16,32,64,128,256,512]
        for y in arr:
            z = max(out_class*2,y)
            if (z!=out_class*2):
                return z
        return 512

    def call(self, inputs: tf.Tensor) -> tf.Tensor:
        x = tf.keras.applications.mobilenet_v2.preprocess_input(inputs)
        
        x = self.encoder(x)
        x = self.model(x)

        return x