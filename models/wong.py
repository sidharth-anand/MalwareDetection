import sklearn.base
import sklearn.svm
import sklearn.multiclass

import tensorflow as tf

def channel_shuffle(x, groups):  
    _, width, height, channels = x.get_shape().as_list()
    group_ch = channels // groups

    x = tf.keras.layers.Reshape([width, height, group_ch, groups])(x)
    x = tf.keras.layers.Permute([1, 2, 4, 3])(x)
    x = tf.keras.layers.Reshape([width, height, channels])(x)
    return x

def shuffle_unit(x, groups, channels,strides):

    y = x
    x = tf.keras.layers.Conv2D(channels//4, kernel_size = 1, strides = (1,1),padding = 'same', groups=groups)(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.ReLU()(x)

    x = channel_shuffle(x, groups)
    
    x = tf.keras.layers.DepthwiseConv2D(kernel_size = (3,3), strides = strides, padding = 'same')(x)
    x = tf.keras.layers.BatchNormalization()(x)

    if strides == (2,2):
        channels = channels - y.shape[-1]
    x = tf.keras.layers.Conv2D(channels, kernel_size = 1, strides = (1,1),padding = 'same', groups=groups)(x)
    x = tf.keras.layers.BatchNormalization()(x)

    if strides ==(1,1):
        x =tf.keras.layers.Add()([x,y])
    if strides == (2,2):
        y = tf.keras.layers.AvgPool2D((3,3), strides = (2,2), padding = 'same')(y)
        x = tf.keras.layers.concatenate([x,y])
    
    x = tf.keras.layers.ReLU()(x)

    return x

def ShuffleNet(start_channels=200 ,input_shape = (224,224,3)):

    groups = 2
    input = tf.keras.layers.Input (input_shape)

    x =  tf.keras.layers.Conv2D (24,kernel_size=3,strides = (2,2), padding = 'same', use_bias = True)(input)
    x =  tf.keras.layers.BatchNormalization()(x)
    x =  tf.keras.layers.ReLU()(x)
    
    x = tf.keras.layers.MaxPool2D (pool_size=(3,3), strides = 2, padding='same')(x)

    repetitions = [3,7,3]

    for i,repetition in enumerate(repetitions):
        channels = start_channels * (2**i)

        x  = shuffle_unit(x, groups, channels,strides = (2,2))

        for i in range(repetition):
            x = shuffle_unit(x, groups, channels,strides=(1,1))

    x = tf.keras.layers.GlobalAveragePooling2D()(x)

    model = tf.keras.Model(input, x)
    return model

class Features(sklearn.base.BaseEstimator, sklearn.base.TransformerMixin):
    def __init__(self):
        self.dense = tf.keras.applications.DenseNet201(include_top=False, weights='imagenet')
        self.shuffle = ShuffleNet()

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        return tf.concat([self.dense(X), self.shuffle(X)], axis=-1)
    
svm = sklearn.svm.LinearSVC()
model = sklearn.multiclass.OneVsOneClassifier(svm)